// Generated by CodiumAI

describe("App", () => {
  // Renders the main component of the weather app.
  it("should render the main component of the weather app", () => {
    // Arrange
    const wrapper = shallow(<App />);

    // Act

    // Assert
    expect(wrapper.find(Inputs)).toHaveLength(1);
    expect(wrapper.find(TimeAndLocation)).toHaveLength(0);
    expect(wrapper.find(TemperatureAndDetails)).toHaveLength(0);
    expect(wrapper.find(Forecast)).toHaveLength(0);
    expect(wrapper.find(ChartView)).toHaveLength(0);
    expect(wrapper.find(AirQuality)).toHaveLength(0);
    expect(wrapper.find('button[data-testid="premium-button"]')).toHaveLength(
      0
    );
  });

  // Formats the background gradient based on the current weather data.
  it("should format the background gradient based on the current weather data", () => {
    // Arrange
    const wrapper = shallow(<App />);
    const formatBackground = wrapper.instance().formatBackground;

    // Act

    // Assert
    expect(formatBackground()).toBe("from-cyan-700 to-blue-700");

    wrapper.setState({ weather: { temp: 25 } });
    expect(formatBackground()).toBe("from-cyan-700 to-blue-700");

    wrapper.setState({ weather: { temp: 35 } });
    expect(formatBackground()).toBe("from-yellow-700 to-yellow-300");

    wrapper.setState({ weather: { temp: 0 } });
    expect(formatBackground()).toBe("from-blue-300 to-gray-300");
  });

  // Fetches weather data based on the user's query and units.
  it("should fetch weather data based on the user's query and units", () => {
    // Arrange
    const fetchWeather = jest.fn();
    const setQuery = jest.fn();
    const setUnits = jest.fn();
    const setWeather = jest.fn();
    const setUserData = jest.fn();
    const toastError = jest.spyOn(toast, "error");
    const wrapper = shallow(<App />);
    wrapper.instance().fetchWeather = fetchWeather;
    wrapper.instance().setQuery = setQuery;
    wrapper.instance().setUnits = setUnits;
    wrapper.instance().setWeather = setWeather;
    wrapper.instance().setUserData = setUserData;

    // Act
    wrapper.find(Inputs).props().setQuery({ city: "London" });
    wrapper.find(Inputs).props().setUnits("imperial");

    // Assert
    expect(setQuery).toHaveBeenCalledWith({ city: "London" });
    expect(setUnits).toHaveBeenCalledWith("imperial");
    expect(fetchWeather).toHaveBeenCalled();

    // Act
    wrapper.setState({ userData: { token: "123", refreshToken: "456" } });

    // Assert
    expect(fetchWeather).toHaveBeenCalledWith({
      query: { city: "London" },
      units: "imperial",
      setWeather,
      token: "123",
      refreshToken: "456",
    });

    // Act
    fetchWeather.mockRejectedValue(new Error("Failed to fetch weather data"));
    wrapper.find(Inputs).props().setQuery({ city: "Paris" });

    // Assert
    expect(toastError).toHaveBeenCalledWith("Failed to fetch weather data");
  });

  // Displays an error message if there is an error fetching weather data.
  it("should display an error message if there is an error fetching weather data", () => {
    // Arrange
    const toastError = jest.spyOn(toast, "error");
    const wrapper = shallow(<App />);

    // Act
    wrapper.setState({ weather: null });
    wrapper.instance().fetchWeather = jest
      .fn()
      .mockRejectedValue(new Error("Failed to fetch weather data"));
    wrapper.find(Inputs).props().setQuery({ city: "London" });

    // Assert
    expect(toastError).toHaveBeenCalledWith("Failed to fetch weather data");
  });

  // Displays a message to get premium to see more if the user does not have a premium tier.
  it("should display a message to get premium to see more if the user does not have a premium tier", () => {
    // Arrange
    const wrapper = shallow(<App />);

    // Act

    // Assert
    expect(wrapper.find('button[data-testid="premium-button"]')).toHaveLength(
      1
    );
  });
});
